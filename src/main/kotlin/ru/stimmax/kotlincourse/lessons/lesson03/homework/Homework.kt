package ru.stimmax.kotlincourse.lessons.lesson03.homework

// 1. Название мероприятия - неизменяемое, известное на момент написания, по факту - константа
const val name: String = "Hackathon Survival"

// 2. Дата проведения (публичная переменная известная на момент написания, но может быть изменена из-за переноса)
var date: String = "23 сентября 2025"

// 3. Место проведения известно на момент написания, но может быть перенесено на другую площадку
var location: String = "Maestro Hall, Boston, USA"

// 4. Подробный бюджет мероприятия, включая расходы на оборудование, кейтеринг и другие операционные расходы.
// в виде списка строк расходов, часть известна заранее, что то может быть добавлено позже
val budget: MutableList<BudgetItem> = mutableListOf(
    BudgetItem("Расходы на оборудование", 1000f),
    BudgetItem("Кейтеринг", 800f),
    BudgetItem("Операционные расходы", 1500f)
)

//5. Количество участников. Неизвестно заранее, будет увеличиваться по мере регистрации на событие
var participantsCount: Int = 0

//6. Длительность хакатона, в днях. Хорошо известно и не меняется.
const val eventDuration: Int = 3

//7. Контактная информация и условия соглашений с поставщиками пищи, оборудования и других услуг.
// может обновляться и уточняться в процессе
var contacts: String = "[какая то контактная информция....]"
    private set(value) {
        field = value
    }

// 8. Текущее состояние хакатона (статус), статус устанавливается и меняется в рамках некого набора констант
// - подготовка/ожидание начала, активная фаза, прошел
const val STATUS_AWAIT = 1
const val STATUS_ACTIVE = 2
const val STATUS_PAST = 3

var status: Int = STATUS_AWAIT
    private set(value) {
        field = value
    }

// 9. Список спонсоров, четко сформирован заранее (потому известен бюджет)
val sponsorsList: List<Sponsor> = mutableListOf(
    Sponsor("IBM"),
    Sponsor("CISCO")
)

// 10. Бюджет мероприятия, общая сумма, выделенная на мероприятие. Не меняется.
const val BUDGET_TOTAL: Float = 10000f

//11. Текущий уровень доступа к интернету, имеряется полосой пропускания в kb/s
var internetAccessBandwidth: Float = 256f
    set(value) {
        if (value > 0) {
            field = value
        }
    }

//12. Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки.
// может корректироваться в процессе мероприятия
var teamInfo: String = "[какая то текстовка....]"

//13. Количество команд, меняется по мере регистрации команд
var teamCount: Int = 0

//14. Перечень задач, будут добавлены в список на старте мероприятия
val taskList: MutableList<String> = mutableListOf()

//15. План эвакуации, значение будет определено после точного выбора локации
lateinit var evacuationPlan: String

// 16.Список доступного оборудования (всё, что выделено для использования на мероприятии)
// совмещен с
// 17 Список свободного оборудования (всё, что можно взять прямо сейчас и что не занято другими участниками)
// изначально позиции свободны (booked равен false), по мере бронирования командами, выставляется флаг со значением true
val equipmentList: MutableList<Equipment> = mutableListOf(
    Equipment("Equipment #1", false),
    Equipment("Equipment #2", false),
    Equipment("Equipment #3", false),
    Equipment("Equipment #4", false),
)

// 18. График питания участников (зависит от поставщика питания, определяемого за неделю до начала)
lateinit var feedingSchedule: String

// 19. План мероприятий на случай сбоев, определяется заранее
val emergencyPlan: String = "[ какой то план на случай сбоев, просто чтобы успокоить нервы, так как он всё равно не сработает ]"

// 20. Список экспертов и жюри. Жюри определяется заранее и не меняется в течении всего мероприятия.
val juriList : List<String> = mutableListOf(
    "Sir Lancelor",
    "Boris Nooland",
    "Akashira Yamomoto"
)

// 21. Политика конфиденциальности
val policy: String = "[ какой то текст о политика конфиденциальности, никто его не читает, кроме юристов ]"

// 22. Приватные отзывы (фидбэк) участников и зрителей для анализа проблем. Список пополняется в течении мероприятия и
// даже после его завершения
val privateFeedback: MutableList<Equipment> = mutableListOf()

// 23. Текущая температура в помещении в oC, данные поступают каждый час через оперативный штаб мероприятия через секретаря.
// до начала мероприятия не обновляется, установим в 0
var temperature: Int = 0
    private set(value) {
        if (value >= -273.15f && value <= 1000f) {
            field = value
        }
    }

// 24. Данные мониторинга и анализ производительности сетевого оборудования и интернет-соединения для целей
// отладки своих приложений командами, переменная должна быть mutable
var monitoring: String = "[ этимология и структура данных не известна, пусть это будет текстовое поле ]"

// 25. Регулятор скорости интернета (понижающий коэффициент, например 0.5) - рубильником играет уважаемое жюри
// стартовое значение - 1
var bandwidthCoefficient: Float = 1f
    private set(value) {
        if (value >= 0f && value <= 1f) {
            field = value
        }
    }

// 26. Уровень освещения, в lux (?), регистрирует секретарь жюри
var brightnessLevel: Float = 0f
    private set(value) {
        field = value
    }

// 27. Лог событий мероприятия, мутабильный список записей
val log: MutableList<String> = mutableListOf();

// 28. Возможность получения медицинской помощи прямо на мероприятии (да/нет), известно заранее
// - позволяет бюджет или нет
const val MEDICAL_SERVICE_ON_PLACE: Boolean = true

// 29. Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы чрезвычайных ситуаций.
const val SECURITY_PLANS: String = "[ тексты, планы, протоколы... ]"

// 30. Регистрационный номер мероприятия, какая-то мнемоника, присваеваемая каждому мероприятию, например
// HACKATON-BOSTON-2025
const val REG_NUMBER: String = "HAKATON-BOSTON-2025"

// 31. Максимально допустимый уровень шума в помещении хакатона. В Дб
const val NOISE_LEVEL_MAX: Int = 50

// 32. Индикатор превышения уровня шума в помещениях (превышен или не превышен в данный момент)
var isNoiseLevelOutBound: Boolean = false;

// 33. План взаимодействия с прессой, информация для внутреннего пользования
const val pressInteractionPlan: String = "[ описание плана ...]"

// 34. Детальная публичная информация о проектах каждой команды, сбор данных включает в себя компиляцию кода и сбор статистики прогона автоматизированных проверок.
var projectsDetails: String = "[ информация о проектах ...]"
    private set(value) {
        field = value
    }

// 35. Статус получения всех необходимых разрешений для проведения мероприятия, сначала false, true - когда все получены
var permissionStatus: Boolean = false

// 36. Индикатор доступности специализированного оборудования в данный момент (например, специальному оборудованию)
var isSpecialEquipmentAvailable: Boolean = true

// 37. Список партнеров мероприятия, опреден заранее и не меняется
val partnersList : List<String> = mutableListOf(
    "Beer & Deer",
    "Adidas",
    "Yakomoto Electrics"
)

// 38. Отчет, включающий фотографии, видео и отзывы, генерируется и становится доступен после завершения мероприятия.
var eventReport: String = ""
    private set(value) {
        field = value
    }

// 39. Внутренние правила распределения призов, опредены один раз и не меняются
private val eventRules: String by lazy {
    "[ текст правил ...]"
}

// 40. Список разыгрываемых призов - определен и не меняется
val prizeList: List<String> = mutableListOf(
    "Prize 1",
    "Prize 2",
    "Prize 3",
    "Prize 4"
);

// 41. Контактная информация экстренных служб, медицинского персонала и других важных служб, для внутреннего пользования.
private val emegencyContacts: String by lazy {
    "[ Контактная информация ...]"
}

// 42. Особые условия для участников с ограниченными возможностями, определены и не меняются, доступны публично
val disabledParticipantsConditions: String = "[ Условия ...]"

// 43. Общее настроение участников (определяется опросами), измеряется по шкале от 0 .. 100, может меняться
var generalMood: Float = 0f;

// 44. Подробный план хакатона, включающий время и содержание каждого сегмента, инициализируется непосредственно перед началом мероприятия, так как зависит от фактического состава команд и взятых в работу задач.
val planDetails: String by lazy {
    "[ Подробный план ...]"
}

// 45. Имя знаменитого специального гостя, которое будет объявлено за день до мероприятия, но в момент инициализации неизвестно.
lateinit var specialGuestName: String

// 46. Максимальное количество людей, которое может вместить место проведения.
const val MAX_GUESTS_NUMBER: Int = 100000

// 47. Количество часов, отведенное каждой команде для работы над проектом.
const val MAX_TEAM_TIME: Int = 48


fun main() {
    print(prizeList)
}

